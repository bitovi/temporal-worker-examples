name: Golang Projects

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run lint check
        run: ./gradlew lint

      - name: Run format check
        run: ./gradlew ktlintCheck

  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.3'
      - name: Install dependencies
        working-directory: ${{ inputs.project }}
        run: go get ./src
      - name: Build
        working-directory: ${{ inputs.project }}
        run: go build -o ./dist/bin ./src
      - name: Test with the Go CLI
        working-directory: ${{ inputs.project }}
        run: go test ./src

  build-and-publish-image:
    runs-on: ubuntu-latest
    needs:
      - lint
      - build-and-test

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Tag the image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            bitovi/temporal-example-workers
          tags: |
            type=raw,value=${{ inputs.project }}-latest,enable=${{ github.ref_name == 'main' }}
            type=semver,pattern=${{ inputs.project }}-{{version}},enable=${{ github.event_name == 'release' }}
      - 
        name: Login to Docker Hub
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - 
        name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.project }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
      - 
        name: Push Docker image
        uses: docker/build-push-action@v4
        if: ${{ (github.ref_name == 'main') || (github.event_name == 'release') }}
        with:
          context: ${{ inputs.project }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          push: true